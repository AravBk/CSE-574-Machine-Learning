# -*- coding: utf-8 -*-
"""test3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfD1Ck0YWn52Yg9sTmQXDGM4xITndf3T
"""

import numpy as np
from scipy.optimize import minimize
from scipy.io import loadmat
from math import sqrt
import time
import pickle

def initializeWeights(n_in, n_out):
    """
    # initializeWeights return the random weights for Neural Network given the
    # number of node in the input layer and output layer
    # Input:
    # n_in: number of nodes of the input layer
    # n_out: number of nodes of the output layer
       
    # Output: 
    # W: matrix of random initial weights with size (n_out x (n_in + 1))"""

    epsilon = sqrt(6) / sqrt(n_in + n_out + 1)
    W = (np.random.rand(n_out, n_in + 1) * 2 * epsilon) - epsilon
    return W

def sigmoid(z):
    """# Notice that z can be a scalar, a vector or a matrix
    # return the sigmoid of input z"""
    
    #your code here
    sigma = 1.0/(1.0 + np.exp(-z))
    return  sigma

def preprocess():
    """ Input:
     Although this function doesn't have any input, you are required to load
     the MNIST data set from file 'mnist_all.mat'.
     Output:
     train_data: matrix of training set. Each row of train_data contains 
       feature vector of a image
     train_label: vector of label corresponding to each image in the training
       set
     validation_data: matrix of training set. Each row of validation_data 
       contains feature vector of a image
     validation_label: vector of label corresponding to each image in the 
       training set
     test_data: matrix of training set. Each row of test_data contains 
       feature vector of a image
     test_label: vector of label corresponding to each image in the testing
       set
     Some suggestions for preprocessing step:
     - feature selection"""

    mat = loadmat('mnist_all.mat')

    train_preprocess = np.zeros(shape=(50000, 784))
    validation_preprocess = np.zeros(shape=(10000, 784))
    test_preprocess = np.zeros(shape=(10000, 784))
    train_label_preprocess = np.zeros(shape=(50000,))
    validation_label_preprocess = np.zeros(shape=(10000,))
    test_label_preprocess = np.zeros(shape=(10000,))

    train_len = 0
    validation_len = 0
    test_len = 0
    train_label_len = 0
    validation_label_len = 0
    
    for key in mat:
        if "train" in key:
            label = key[-1]  
            tup = mat.get(key)
            sap = range(tup.shape[0])
            tup_perm = np.random.permutation(sap)
            tup_len = len(tup)
            tag_len = tup_len - 1000  

            
            train_preprocess[train_len:train_len + tag_len] = tup[tup_perm[1000:], :]
            train_len += tag_len

            train_label_preprocess[train_label_len:train_label_len + tag_len] = label
            train_label_len += tag_len

            validation_preprocess[validation_len:validation_len + 1000] = tup[tup_perm[0:1000], :]
            validation_len += 1000

            validation_label_preprocess[validation_label_len:validation_label_len + 1000] = label
            validation_label_len += 1000

        elif "test" in key:
            label = key[-1]
            tup = mat.get(key)
            sap = range(tup.shape[0])
            tup_perm = np.random.permutation(sap)
            tup_len = len(tup)
            test_label_preprocess[test_len:test_len + tup_len] = label
            test_preprocess[test_len:test_len + tup_len] = tup[tup_perm]
            test_len += tup_len
           
    train_size = range(train_preprocess.shape[0])
    train_perm = np.random.permutation(train_size)
    train_data = train_preprocess[train_perm]
    train_data = np.double(train_data)
    train_data = train_data / 255.0
    train_label = train_label_preprocess[train_perm]

    validation_size = range(validation_preprocess.shape[0])
    vali_perm = np.random.permutation(validation_size)
    validation_data = validation_preprocess[vali_perm]
    validation_data = np.double(validation_data)
    validation_data = validation_data / 255.0
    validation_label = validation_label_preprocess[vali_perm]

    test_size = range(test_preprocess.shape[0])
    test_perm = np.random.permutation(test_size)
    test_data = test_preprocess[test_perm]
    test_data = np.double(test_data)
    test_data = test_data / 255.0
    test_label = test_label_preprocess[test_perm]

    # Feature selection
    #your code here
    np_Stack = np.vstack(( train_data, validation_data, test_data)) 

    Data = np.array( np_Stack)
    remove = np.all(Data == Data[0,:], axis = 0) 

    selected =[]
    for i in range(784):
      if remove[i] == False:
        selected.append(i)

    #removing the columns
    global RemoveData
    RemoveData = Data[:,~remove] 
    
    train_data = RemoveData[0:len(train_data),:] 

    length_TrainData = len(train_data)
    length_ValidationData = len(validation_data)

    validation_data = RemoveData[length_TrainData: (length_TrainData + len(validation_data)),:] 

    length_TrainData = len(train_data)
    length_ValidationData = len(validation_data)
    length_TestData = len(test_data)

    test_data = RemoveData[( length_TrainData + length_ValidationData): (length_TrainData + length_ValidationData + length_TestData),:] 

    print('preprocess done')

    return train_data, train_label, validation_data, validation_label, test_data, test_label, selected

# Commented out IPython magic to ensure Python compatibility.
def nnObjFunction(params, *args):
    """% nnObjFunction computes the value of objective function (negative log 
#     %   likelihood error function with regularization) given the parameters 
#     %   of Neural Networks, thetraining data, their corresponding training 
#     %   labels and lambda - regularization hyper-parameter.
#     % Input:
#     % params: vector of weights of 2 matrices w1 (weights of connections from
#     %     input layer to hidden layer) and w2 (weights of connections from
#     %     hidden layer to output layer) where all of the weights are contained
#     %     in a single vector.
#     % n_input: number of node in input layer (not include the bias node)
#     % n_hidden: number of node in hidden layer (not include the bias node)
#     % n_class: number of node in output layer (number of classes in
#     %     classification problem
#     % training_data: matrix of training data. Each row of this matrix
#     %     represents the feature vector of a particular image
#     % training_label: the vector of truth label of training images. Each entry
#     %     in the vector represents the truth label of its corresponding image.
#     % lambda: regularization hyper-parameter. This value is used for fixing the
#     %     overfitting problem.
       
#     % Output: 
#     % obj_val: a scalar value representing value of error function
#     % obj_grad: a SINGLE vector of gradient value of error function
#     % NOTE: how to compute obj_grad
#     % Use backpropagation algorithm to compute the gradient of error function
#     % for each weights in weight matrices.
#     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#     % reshape 'params' vector into 2 matrices of weight w1 and w2
#     % w1: matrix of weights of connections from input layer to hidden layers.
#     %     w1(i, j) represents the weight of connection from unit j in input 
#     %     layer to unit i in hidden layer.
#     % w2: matrix of weights of connections from hidden layer to output layers.
#     %     w2(i, j) represents the weight of connection from unit j in hidden 
#     %     layer to unit i in output layer."""

    n_input, n_hidden, n_class, training_data, training_label, lambdaval = args

    w1 = params[0:n_hidden * (n_input + 1)].reshape((n_hidden, (n_input + 1)))
    w2 = params[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))
    obj_val = 0

    # Your code here
    
    Code_scheme = np.zeros((training_label.shape[0], 10))

    Code_scheme[np.arange(training_label.shape[0], dtype="int"), training_label.astype(int)] = 1
    training_label = Code_scheme
    
    #Forward Prop
    training_data = np.column_stack((np.array(training_data), np.array(np.ones(training_data.shape[0]))))
    
    #Feed Forward
    s1 = sigmoid(np.dot(training_data, w1.T)) 
    sigma1Shape = np.ones(s1.shape[0])
    s1 = np.column_stack((s1, sigma1Shape))
    
    s2 = sigmoid(np.dot(s1, w2.T))
    
    #Back propagation
    deltaVal = s2 - training_label 
    
    grad_w2 = np.dot(deltaVal.T, s1) 
    grad_w1 = np.delete(np.dot(((1 - s1) * s1 * (np.dot(deltaVal, w2))).T, training_data), n_hidden, 0)
    
    N = training_data.shape[0]

    lambda_2n = (lambdaval / (2 * N))
    sumSquares1 = np.sum(np.square(w1))
    sumSquares2 = np.sum(np.square(w2))

    #Updating the obj_val 
    obj_val = ((np.sum(-1 * (training_label * np.log(s2) + (1 - training_label) * np.log(1 - s2)))) / N) + ( lambda_2n *( sumSquares1 + sumSquares2))
    
    grad_w1 = (grad_w1 + (lambdaval * w1)) / N
    grad_w2 = (grad_w2 + (lambdaval * w2)) / N
    
    obj_grad = np.array([])
    obj_grad = np.concatenate((grad_w1.flatten(), grad_w2.flatten()), 0)

    return (obj_val, obj_grad)

# Commented out IPython magic to ensure Python compatibility.

def nnPredict(w1, w2, data):
    """% nnPredict predicts the label of data given the parameter w1, w2 of Neural
#     % Network.
#     % Input:
#     % w1: matrix of weights of connections from input layer to hidden layers.
#     %     w1(i, j) represents the weight of connection from unit i in input 
#     %     layer to unit j in hidden layer.
#     % w2: matrix of weights of connections from hidden layer to output layers.
#     %     w2(i, j) represents the weight of connection from unit i in input 
#     %     layer to unit j in hidden layer.
#     % data: matrix of data. Each row of this matrix represents the feature 
#     %       vector of a particular image
       
#     % Output: 
#     % label: a column vector of predicted labels"""

    labels = np.array([])
    # Your code here
    lengthData = np.ones( len(data)) 

    data = np.column_stack( [data, lengthData])
    
    sigma1 = np.column_stack( [sigmoid( data.dot( w1.T)), lengthData]) 
    sigma2 = sigmoid( sigma1.dot( w2.T)) 

    labels = np.argmax( sigma2, axis=1) #Maximum value

    return labels


"""**************Neural Network Script Starts here********************************"""
startTime = time.time()
train_data, train_label, validation_data, validation_label, test_data, test_label, selected = preprocess()

#  Train Neural Network

# set the number of nodes in input unit (not including bias unit)
n_input = train_data.shape[1]

# set the number of nodes in hidden unit (not including bias unit)
n_hidden = 20

# set the number of nodes in output unit
n_class = 10

# initialize the weights into some random matrices
initial_w1 = initializeWeights(n_input, n_hidden)
initial_w2 = initializeWeights(n_hidden, n_class)

# unroll 2 weight matrices into single column vector
initialWeights = np.concatenate((initial_w1.flatten(), initial_w2.flatten()), 0)

# set the regularization hyper-parameter
lambdaval = 20

args = (n_input, n_hidden, n_class, train_data, train_label, lambdaval)

# Train Neural Network using fmin_cg or minimize from scipy,optimize module. Check documentation for a working example

opts = {'maxiter': 50}  # Preferred value.

nn_params = minimize(nnObjFunction, initialWeights, jac=True, args=args, method='CG', options=opts)

# In Case you want to use fmin_cg, you may have to split the nnObjectFunction to two functions nnObjFunctionVal
# and nnObjGradient. Check documentation for this function before you proceed.
# nn_params, cost = fmin_cg(nnObjFunctionVal, initialWeights, nnObjGradient,args = args, maxiter = 50)


# Reshape nnParams from 1D vector into w1 and w2 matrices
w1 = nn_params.x[0:n_hidden * (n_input + 1)].reshape((n_hidden, (n_input + 1)))
w2 = nn_params.x[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))

# Test the computed parameters

predicted_label = nnPredict(w1, w2, train_data)

# find the accuracy on Training Dataset

print('\n Training set Accuracy:' + str(100 * np.mean((predicted_label == train_label).astype(float))) + '%')

predicted_label = nnPredict(w1, w2, validation_data)

# find the accuracy on Validation Dataset

print('\n Validation set Accuracy:' + str(100 * np.mean((predicted_label == validation_label).astype(float))) + '%')

predicted_label = nnPredict(w1, w2, test_data)

# find the accuracy on Validation Dataset

print('\n Test set Accuracy:' + str(100 * np.mean((predicted_label == test_label).astype(float))) + '%')

timeDifference = time.time()-startTime
print('Time Taken: ' + str(timeDifference)+ ' seconds.')

details = {"selected_features": selected, "n_hidden": n_hidden, "w1": w1, "w2": w2, "lambda": lambdaval}

pickle.dump( details, open( "params.pickle", "wb" ) )

details = pickle.load( open( "params.pickle", "rb" ) )
print(details)